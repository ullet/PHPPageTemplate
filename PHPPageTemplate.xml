<!--
 *************************************************************************
 * PHPPageTemplate: A PHP4 page templating system.                       *
 * Version 0.2.1 (14 January 2007)                                       *
 * Copyright (C) 2006-2007 Trevor Barnett                                *
 *                                                                       *
 * This program is free software; you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation; either version 2 of the License, or     *
 * (at your option) any later version.                                   *
 *                                                                       *
 * This program is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 * GNU General Public License for more details.                          *
 *                                                                       *
 * You should have received a copy of the GNU General Public License     *
 * along with this program; if not, write to the Free Software           *
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
 * USA                                                                   *
 *************************************************************************
-->
<document>
  <class name="PageBase" modifiers="public, abstract">
    Base class for a web page based on a template and a template page
    <property name="_pageTemplate" modifiers="private" type="&amp;PageBase">
      Template for Page
    </property>
    <property name="_placeHolderfunctions" modifiers="private" type="[string,string]">
      Array of functions for place holders
    </property>
    <property name="_page" modifiers="private" 
      type="&amp;PageBase">
      Reference to page using template
    </property>
    <property name="_title" modifiers="private" type="string">
      Title of page for display in browser title bar
    </property>
    <property name="_enablePageCaching" modifiers="private" type="bool">
      Flag setting page output caching enabled/disabled
    </property>
    <property name="_enablePageBuffering" modifiers="private" type="bool">
      Flag setting page output buffering enabled/disabled.
      Buffering must be enabled to enable page caching.
    </property>    
    <property name="_pageCache" modifiers="private" type="&amp;PageCache">
      PageCache for caching page.
    </property>
    <constructor modifiers="protected">
      Create PageBase object.
    </constructor>
    <method name="get_EncodedTitle" modifiers="public" returnType="string">
      Gets HTML encoded page title 
    </method>
    <method name="get_Title" modifiers="public" returnType="string">
      Gets page title 
    </method>
    <method name="set_Title" modifiers="public" returnType="void">
      Sets page title
      <parameter name="$title" type="string">
        Title of page
      </parameter>
    </method>
    <method name="get_Page" modifiers="public" returnType="&amp;PageBase">
      Gets page using template 
    </method>
    <method name="set_Page" modifiers="public" returnType="void">
      Sets page using template
      <parameter name="$page" type="&amp;PageBase">
        Page using template
      </parameter>
    </method>
    <method name="get_PageUrl" modifiers="public" returnType="string">
      Gets the URL of the currently executing page.
    </method>
    <method name="get_PageName" modifiers="public" returnType="string">
      Gets the name of the currently executing page.
    </method>
    <method name="set_EnablePageCaching" modifiers="public" returnType="void">
      Set flag indicating if page caching is enabled.    
      <parameter name="$enabled" type="bool">
        Boolean flag
      </parameter>
    </method>
    <method name="get_EnablePageCaching" modifiers="public" returnType="bool">
      Get flag indicating if page caching is enabled.
    </method>
    <method name="set_EnablePageBuffering" modifiers="public" returnType="void">
      Set flag indicating if page buffering is enabled.    
      <parameter name="$enabled" type="bool">
        Boolean flag
      </parameter>
    </method>
    <method name="get_EnablePageBuffering" modifiers="public" returnType="bool">
      Get flag indicating if page buffering is enabled.
    </method>
    <method name="set_CacheDuration" modifiers="public" returnType="void">
      Set duration to cache page.    
      <parameter name="$duration" type="int">
        Duration to cache page.
      </parameter>
    </method>
    <method name="get_CacheDuration" modifiers="public" returnType="int">
      Get duration to cache page
    </method>
    <method name="set_CacheParameters" modifiers="public" returnType="void">
      Set querysting parameters to vary cache.    
      <parameter name="$parameters" type="string">
        Querysting parameters to vary cache.
      </parameter>
    </method>
    <method name="get_CacheParameters" modifiers="public" returnType="string">
      Get querysting parameters to vary cache
    </method>
    <method name="RenderPageSection" modifiers="public" returnType="void">
      Render specified page section
      <parameter name="$pageSectionName" type="string">
        Name of page section to render
      </parameter>
    </method>
    <method name="Render" modifiers="public" returnType="void">
      Render page
    </method>
    <method name="DoRender" modifiers="public" returnType="void">
      Do rendering of page
    </method>
    <method name="CallFunctionForPlaceHolder" modifiers="public" returnType="void">
      Calls function to fill the specified placeholder
      <parameter name="$placeHolderName" type="string">
        Name of placeholder
      </parameter>
    </method>
    <method name="RenderContent" modifiers="public, abstract" returnType="void">
      Render templated content
    </method>
    <method name="_set_PageTemplate" modifiers="protected" returnType="void">
      Sets page template
      <parameter name="$pageTemplate" type="&amp;PageBase">
        Template for page
      </parameter>
    </method>
    <method name="_get_PageTemplate" modifiers="protected" returnType="&amp;PageBase">
      Gets page template
    </method>
    <method name="_get_PageCache" modifiers="protected" returnType="&amp;PageCache">
      Gets PageCache
    </method>
    <method name="_get_CacheDirectory" modifiers="protected, abstract" returnType="string">
      Get cache directory
    </method>
    <method name="PreRender" modifiers="protected, abstract" returnType="void">
      Execute code required before Render().  Will always be called even if page is cached.
    </method>
    <method name="PostRender" modifiers="protected, abstract" returnType="void">
      Execute code required after Render().  Will always be called even if page is cached.
    </method>
    <method name="_RegisterPlaceHolder" modifiers="protected" returnType="void">
      Add function to list of placeholder functions
      <parameter name="$placeHolderName" type="string">
        Name of placeholder
      </parameter>
      <parameter name="$placeHolderName" type="string">
        Name of function to be called to fill place holder
      </parameter>
    </method>
    <method name="_RenderPlaceHolder" modifiers="protected" returnType="void">
      Render the content for the specified placeholder
      <parameter name="$name" type="string">
        Name of place holder
      </parameter>
    </method>
    <method name="_ConditionalRenderPlaceHolder" modifiers="protected" returnType="void">
      Render the content for the specified placeholder if condition is true
      <parameter name="$name" type="string">
        Name of place holder
      </parameter>
      <parameter name="$condition" type="bool">
        Boolean conditional, only render if true
      </parameter>    
    </method>
  </class>
  <class name="PageSectionBase" modifiers="public, abstract">
    Base class for a web page section
    <method name="Render" modifiers="public" returnType="void">
      Render page section
    </method>
    <method name="SetProperty" modifiers="public, abstract" returnType="void">
      Set specified property of page section
      <parameter name="$key" type="string">
        Name of property
      </parameter>
      <parameter name="$name" type="string">
        Value of property
      </parameter>
    </method>
    <method name="_ConvertStringToBool" modifiers="protected" returnType="string">
      Convert a string value to a boolean.
      <parameter name="$value" type="bool">
        Value to convert
      </parameter>
    </method>
  </class>
  <class name="PageCache" modifiers="public">
    Base class for a web page based on a template and a template page
    <property name="_cacheDuration" modifiers="private" type="int">
      Set duration for page to be cached
    </property>    
    <property name="_cacheParameters" modifiers="private" type="string">
      Comma separated list of querystring parameter names to vary cache.
      Output for different values of the parameter will be cached separately.
    </property>
    <property name="_cacheParameters" modifiers="private" type="string[]">
      Array of querystring parameter names to vary cache.
      Output for different values of the parameter will be cached separately.
    </property>
    <property name="_cacheDirectory" modifiers="private" type="string">
      Directory for storing cache files.
    </property>
    <property name="_page" modifiers="private"
      type="&amp;PageBase">
      Reference to page to be cached.
    </property>
    <constructor modifiers="public">
      Create page cache object.
      <parameter name="$cacheDirectory" type="string">
        Directory for storing cache files.
      </parameter>
      <parameter name="$cacheDuration" type="string">
        Duration for page to cached.
      </parameter>
      <parameter name="$cacheParameters" type="string">
        Comma separated list of querystring parameters to vary cache.
      </parameter>
    </constructor>
    <method name="set_CacheParameters" modifiers="public" returnType="void">
      Set parameter list for cache to be varied by.
      <parameter name="$cacheParameters" type="string">
        Parameter list as comma separated string.
      </parameter>
    </method>
    <method name="set_CacheDuration" modifiers="public" returnType="void">
      Set duration to cache page.
      <parameter name="$cacheDuration" type="int">
        Duration in seconds.
      </parameter>
    </method>
    <method name="CachePage" modifiers="public" returnType="void">
      Saves page output to cache.
    </method>
    <method name="GetCachedPage" modifiers="public" returnType="string">
      Get page output from cache.  Returns false if
      page not in cache or expired.
    </method>
    <method name="ClearCache" modifiers="public" returnType="void">
      Clears cache for specified page or all pages if no page specified.
      <parameter name="$pageName" type="string">
        Optional.  Name of page to clear cache.  
        If not given clears whole cache.
      </parameter>
    </method>
    <method name="_GetNewCacheFilePath" modifiers="protected" returnType="string">
      Get path of cache file for current or given page.
      <parameter name="$pageName" type="string">
        Optional.  Name of page.  If not given uses name of current page.
      </parameter>
    </method>
    <method name="_AddCacheFilePathToList" modifiers="protected" returnType="bool">
      Added cache file to cache file list for page.
      <parameter name="$cacheFilePath" type="string">
        Path of cache file to be added to list.
      </parameter>
      <parameter name="$pageName" type="string">
        Optional.  Name of page.  If not given uses name of current page.
      </parameter>
    </method>
    <method name="_GetCacheFilePathsForPage" modifiers="protected" returnType="string[]">
      Get list of cache file paths for page.
      <parameter name="$pageName" type="string">
        Optional.  Name of page.  If not given uses name of current page.
      </parameter>
    </method>
    <method name="_GetCacheFilePath" modifiers="protected" returnType="string">
      Get path cache file for previously cached page.
      <parameter name="$pageName" type="string">
        Optional.  Name of page.  If not given uses name of current page.
      </parameter>
    </method>
    <method name="_GetCacheListFilePath" modifiers="protected" returnType="string">
      Get path of cache list file for page
      <parameter name="$pageName" type="string">
        Optional.  Name of page.  If not given uses name of current page.
      </parameter>
    </method>
    <method name="_FileSystemSafeName" modifiers="protected" returnType="string">
      Encode string to be safe to use as a file or directory name.
      <parameter name="$name" type="string">
        String to encode.
      </parameter>
    </method>
    <method name="_GetNameFromFileSystemSafeName" modifiers="protected" returnType="string">
      Decode string previously encoded with _FileSystemSafeName()
      <parameter name="$safeName" type="string">
        String to decode.
      </parameter>
    </method>
    <method name="_TidyDirName" modifiers="protected" returnType="string">
      Clean up directory name to consistently use OS specific directory
      separator and ensure terminated by directory separator.
      <parameter name="$safeName" type="string">
        String to decode.
      </parameter>
    </method>
  </class>
</document>
